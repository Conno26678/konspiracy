app.get('/teacher', isAuthenticated, (req, res) => {
	try {
		// Aggregate all students from all classrooms
		const allStudents = req.session.user.classrooms
			? req.session.user.classrooms.flatMap(classroom => classroom.students)
			: [];

		// Filter students who are currently signed in
		const activeStudents = allStudents
			.filter(student => activeUsers.has(student.studentId))
			.map(student => student.displayName);

		// Remove duplicates by creating a Set
		const uniqueActiveStudents = [...new Set(activeStudents)];

		// Load quizzes + questions + answers
		const sql = `
			SELECT 
				q.uid            AS quizUid,
				q.quizname       AS quizname,
				qq.uid           AS questionId,
				qq.questions     AS questionText,
				qa.answers       AS answerText,
				qa.correct       AS correct
			FROM quizzes q
			INNER JOIN quizquestions qq ON q.uid = qq.quizid
			INNER JOIN questionanswers qa ON qq.uid = qa.questionid
			ORDER BY q.quizname, qq.uid, qa.rowid
		`;
		db.all(sql, [], (err, rows) => {
			if (err) {
				console.error('DB error loading quizzes', err);
				return res.status(500).send('Database error');
			}
			const quizzes = {};
			// Structure to match existing front-end (questions array + parallel answers array)
			rows.forEach(r => {
				if (!quizzes[r.quizname]) {
					quizzes[r.quizname] = {
						title: r.quizname,
						questions: [],
						answers: [],
						_qIndex: {} // temp: questionId -> index
					};
				}
				const qObj = quizzes[r.quizname];
				if (qObj._qIndex[r.questionId] === undefined) {
					qObj._qIndex[r.questionId] = qObj.questions.length;
					qObj.questions.push(r.questionText);
					qObj.answers.push({}); // placeholder object mapping answer -> bool
				}
				const qi = qObj._qIndex[r.questionId];
				qObj.answers[qi][r.answerText] = !!r.correct;
			});
			// Cleanup temp
			Object.values(quizzes).forEach(q => delete q._qIndex);

			// Check if teacher has an active game
			const activeGame = teacherGames(req.session.user.id);

			res.render('teacher.ejs', {
				students: uniqueActiveStudents,
				quizzes,
				activeGame: activeGame ? activeGame.getGameStateData() : null
			});
		});
	} catch (error) {
		console.error(error);
		res.status(500).send('An error occurred while loading the teacher page.');
	}
});

app.post('/teacher', isAuthenticated, (req, res) => {
	const selectedQuiz = req.body.selectedQuiz;
	console.log(`Selected quiz: ${selectedQuiz}`);
	
	// Find the quiz UID in the database
    db.get('SELECT uid FROM quizzes WHERE quizname = ?', [selectedQuiz], (err, row) => {
        if (err) {
            console.error('Database error:', err);
            return res.status(500).send('Database error');
        }
        if (!row) {
            return res.status(404).send('Quiz not found');
        }

        // Store the UID in the session for later use
        req.session.selectedQuizUid = row.uid;
		res.redirect('/quiz');
	});
});

function loadQuizByUid(uid, cb) {
    const sql = `
        SELECT 
            q.uid            AS quizUid,
            q.quizname       AS quizname,
            qq.uid           AS questionId,
            qq.questions     AS questionText,
            qa.answers       AS answerText,
            qa.correct       AS correct
        FROM quizzes q
        INNER JOIN quizquestions qq ON q.uid = qq.quizid
        INNER JOIN questionanswers qa ON qq.uid = qa.questionid
        WHERE q.uid = ?
        ORDER BY qq.uid, qa.rowid
    `;
    db.all(sql, [uid], (err, rows) => {
        if (err) return cb(err);
        if (!rows.length) return cb(null, null);
        const quiz = {
            uid: rows[0].quizUid,
            title: rows[0].quizname,
            questions: []
        };
        const qMap = {};
        rows.forEach(r => {
            if (!qMap[r.questionId]) {
                qMap[r.questionId] = { question: r.questionText, answers: [] };
                quiz.questions.push(qMap[r.questionId]);
            }
            qMap[r.questionId].answers.push({
                answer: r.answerText,
                correct: !!r.correct
            });
        });
        cb(null, quiz);
    });
}